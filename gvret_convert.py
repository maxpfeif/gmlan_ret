#	Authored: Max Pfeiffer - 2018
#
#	Reads the .csv file format generated by Comma Ai's Cabana and converts to
#	the GVRET format supported for use with Collin Kidder's SavvyCAN 
#
#	Preconditions: 	sourcefilename.csv 
#					Bus ID of interest (i.e. "1") 
#	
#	Outputs:		gvret_sourcefilename.csv 
#					
#	Example: $ python gvret_convert.py cabana_output.csv 1

# ------- Desired Output Format -------- 
# Time Stamp,ID,Extended,Bus,LEN,D1,D2,D3,D4,D5,D6,D7,D8
# 166064000,0000021A,false,0,8,FE,36,12,FE,69,05,07,AD,

# note that there is some byte stuffing taking place 
# 174624000,00000116,false,0,6,00,C0,F4,41,96,A2,00,00,

#!/usr/bin/python
import sys 
import csv
from decimal import *

header = 1

with open(sys.argv[1]) as original:
	og_data = csv.reader(original, delimiter = ",", quotechar = "|")
	# make a new file as the output file 
	gvret_data = open("gvret_"+sys.argv[1], "w+")							
	gvret_writer = csv.writer(gvret_data, delimiter = ",")
	gvret_writer.writerow(["Time Stamp", "ID", "Extended", "Bus", "LEN", "D1" , "D2", "D3", "D4", "D5", "D6", "D7", "D8"])  
	
	for row in og_data:
		if header:
			header = 0
		else: 
			if(row.pop(2) == sys.argv[2]):
				# get the message time from the input file -- convert to micros 
				msg_time = long(1000000 * float(row.pop(0)))
				print "msg_time = " 
				print  msg_time

				# get the data from the input file
				msg_data = list(row.pop(1))
				print "msg_data as list = " 
				print msg_data
				# need to calculate the length of this data and save that parameter to the data_len
				# check odd-value case 
				if len(msg_data) % 2 > 0:
					msg_data.insert(0,"0")					
				data_len = len(msg_data)/2


				print "data_len = " + str(data_len)

				# check the edge case that the length is one, in which we gotta add a char right off the bat 
				#if data_len < 2:
				#	b0 = msg_data.pop()
				#	b0 = "0" + b0 
				#	msg_data.append(b0)
				#	print "detected msg data was 1 char/byte"
				#	print msg_data 

				# need to concatenate every two bytes	
				for i in range(0,data_len):
					# pop the two bytes off of the data, or two entries from the list and concatenate them, then add them back to the end of the list 
					b0 = msg_data.pop()	
					# handle the case where the the msg_data is empty.. 
					if len(msg_data) < 1: 
						b1 = "0"
					else:	
						b1 = msg_data.pop()
					concat = b1 + b0
					print "concat is " + concat
					msg_data.insert(0,concat.upper())
					print msg_data

				while len(msg_data) < 8:
					msg_data.insert(0, "00")
					# then stuff if length < 8  
				print msg_data


				msg_bytes = "" 
				
				# finds the data length and converts it to the proper format 
				addr = str(hex(int(row.pop(0))))
				addr =list(addr)
				addr.remove("x")
				while len(addr) < 8:
					addr.insert(0,0) 
				str_addr = ""
				while len(addr) > 0:
					str_addr = str(addr.pop()) + str_addr
				addr = str_addr.upper()
					

				# determine if the message id is extendeded by checking whether or not it is greater than 4095 
				extended = addr > hex(4096)
				print "extended = " + str(extended) 

				# need to write time, ID, extended, bus, len, then all of the data bytes. I believe this can be done with insert or append 
				msg_data.insert(0, data_len)
				print "inserted data len into msg_data"
				print msg_data
				msg_data.insert(0, sys.argv[2])
				print "inserted bus no into msg_data"
				print msg_data
				if extended:
					msg_data.insert(0,"true")
				else: 
					msg_data.insert(0,"false")
				print "inserted extended into msg_data"
				print msg_data
				msg_data.insert(0,addr)
				print "inserted address into msg_data"
				print msg_data
				msg_data.insert(0,msg_time)
				print "inserted time into msg_data"
				print msg_data

				# now we gotta write dis ish to the output file 
				gvret_writer.writerow(msg_data)


gvret_data.close()
original.close()


